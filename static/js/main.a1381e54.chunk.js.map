{"version":3,"sources":["components/Grid/Card/TimerCard.jsx","components/Grid/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","TimerCard","props","date","Date","setSeconds","timeRemaining","timeString","toISOString","substr","react_default","a","createElement","card","cover","src","img","actions","icon","type","pause","onClick","handlePauseTimer","index","handleDelete","bordered","title","description","input","time_picker","onChange","_","handleUpdateTime","split","reduce","acc","time","defaultOpenValue","moment","onOpenChange","handleSwapInput","open","style","color","fontSize","Grid","background","padding","height","row","gutter","justify","align","printerList","map","el","i","col","key","xs","sm","md","lg","marginBottom","Card_TimerCard","Object","assign","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","printers","state","toConsumableArray","printer","objectSpread","timerAction","newPrinterList","setState","delete","swapInput","bool","updateTime","pauseTimer","timeInterval","setInterval","components_Grid_Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1381e54.chunk.js","sourcesContent":["import React from \"react\";\nimport { TimePicker } from \"antd\";\nimport moment from \"moment\";\nimport { Card, Icon } from \"antd\";\n\nconst { Meta } = Card;\n\nconst TimerCard = (props) => {\n\tconst date = new Date(null);\n\tdate.setSeconds(props.timeRemaining);\n\tconst timeString = date.toISOString().substr(11, 8);\n\n\tfunction updateTime(_, timeString) {\n\t\tprops.handleUpdateTime(props.index, timeString.split(\":\").reduce((acc, time) => 60 * acc + +time));\n\t}\n\n\treturn (\n\t\t<Card\n\t\t\tcover={<img src={props.img} />}\n\t\t\tactions={[\n\t\t\t\t<Icon\n\t\t\t\t\ttype={props.pause ? \"caret-right\" : \"pause\"}\n\t\t\t\t\tonClick={() => props.handlePauseTimer(props.index)}\n\t\t\t\t/>,\n\t\t\t\t<Icon type=\"delete\" onClick={() => props.handleDelete(props.index)} />\n\t\t\t]}\n\t\t\tbordered={false}\n\t\t>\n\t\t\t<Meta\n\t\t\t\ttitle={props.title}\n\t\t\t\tdescription={\n\t\t\t\t\tprops.input ? (\n\t\t\t\t\t\t<TimePicker\n\t\t\t\t\t\t\tonChange={updateTime}\n\t\t\t\t\t\t\tdefaultOpenValue={moment(timeString, \"HH:mm:ss\")}\n\t\t\t\t\t\t\tonOpenChange={() => props.handleSwapInput(props.index, false)}\n\t\t\t\t\t\t\topen={props.input}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h3\n\t\t\t\t\t\t\tonClick={() => props.handleSwapInput(props.index, true)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: props.timeRemaining === 0 ? \"#5cd121\" : props.pause ? \"#ea0909\" : null,\n\t\t\t\t\t\t\t\tfontSize: 22\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{timeString}\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t/>\n\t\t</Card>\n\t);\n};\n\nexport default TimerCard;\n","import React from \"react\";\nimport { Col, Row } from \"antd\";\nimport TimerCard from \"./Card/TimerCard\";\n\nconst Grid = (props) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tbackground: \"#ECECEC\",\n\t\t\t\tpadding: \"30px\",\n\t\t\t\theight: \"100vh\"\n\t\t\t}}\n\t\t>\n\t\t\t<Row gutter={16} type=\"flex\" justify=\"center\" align=\"top\">\n\t\t\t\t{props.printerList.map((el, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Col key={i} xs={12} sm={8} md={8} lg={4} style={{ marginBottom: \"30px\" }}>\n\t\t\t\t\t\t\t<TimerCard index={i} {...props} {...el} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Row>\n\t\t</div>\n\t);\n};\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport Grid from \"./components/Grid/Grid\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport \"./App.css\";\n\nclass App extends Component {\n\tprinters = [\n\t\t{\n\t\t\ttitle: \"1. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"2. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"3. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"4. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"5. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"6. 3D-Printer\",\n\t\t\timg:\n\t\t\t\t\"https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Distribution/2018/01/09/goods_img_big-v1/20180109121635_60388.jpg\"\n\t\t}\n\t];\n\n\tstate = {\n\t\tprinterList: [\n\t\t\t...this.printers.map((printer) => {\n\t\t\t\treturn {\n\t\t\t\t\t...printer,\n\t\t\t\t\tpause: false,\n\t\t\t\t\ttimeRemaining: 0\n\t\t\t\t};\n\t\t\t})\n\t\t]\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.timeInterval = setInterval(this.timerAction, 1000);\n\t}\n\n\ttimerAction = () => {\n\t\tconst newPrinterList = this.state.printerList.map((el) => {\n\t\t\treturn {\n\t\t\t\t...el,\n\t\t\t\ttimeRemaining: el.timeRemaining > 0 ? (el.pause ? el.timeRemaining : el.timeRemaining - 1) : 0\n\t\t\t};\n\t\t});\n\n\t\tthis.setState({\n\t\t\tprinterList: newPrinterList\n\t\t});\n\t};\n\n\tdelete = (index) => {\n\t\tlet newPrinterList = [ ...this.state.printerList ];\n\t\tnewPrinterList[index].timeRemaining = 0;\n\t\tthis.setState({\n\t\t\tprinterList: newPrinterList\n\t\t});\n\t};\n\n\tswapInput = (index, bool) => {\n\t\tlet newPrinterList = [ ...this.state.printerList ];\n\t\tnewPrinterList[index].input = bool;\n\t\tthis.setState({\n\t\t\tprinterList: newPrinterList\n\t\t});\n\t};\n\n\tupdateTime = (index, time) => {\n\t\tlet newPrinterList = [ ...this.state.printerList ];\n\t\tnewPrinterList[index].timeRemaining = time;\n\t\tthis.setState({\n\t\t\tprinterList: newPrinterList\n\t\t});\n\t};\n\n\tpauseTimer = (index) => {\n\t\tlet newPrinterList = [ ...this.state.printerList ];\n\t\tnewPrinterList[index].pause = !newPrinterList[index].pause;\n\t\tthis.setState({\n\t\t\tprinterList: newPrinterList\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Grid\n\t\t\t\thandleSwapInput={this.swapInput}\n\t\t\t\thandleUpdateTime={this.updateTime}\n\t\t\t\thandlePauseTimer={this.pauseTimer}\n\t\t\t\tprinterList={this.state.printerList}\n\t\t\t\thandleDelete={this.delete}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}